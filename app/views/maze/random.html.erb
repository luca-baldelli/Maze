<div id="maze"></div>
<script>
    var Maze = {
        random: function () {
            return m.request({method: "GET", url: "random.json"});
        }
    };
    var PathFinder = {
        neighbour: function (maze, row, column, direction) {
            if (direction === 'up') {
                newRow -= 1;
                return maze[row-1][column];
            } else if (direction === 'down') {
                return maze[row-1][column];
            } else if (direction === 'left') {
                return maze[row][column-1];
            } else if (direction === 'right') {
                return maze[row][column-1];
            }
        },
        randomDirection: function (maze, row, column, solution) {
            var availableDirections = [];
            var cell = maze[row][column];
            $(cell.open).each(function(direction) {
                if (!$.inArray(solution, PathFinder.neighbour(maze, row, column, direction))) {
                    availableDirections.push(direction);
                }
            });
            console.log(availableDirections)
            return availableDirections[Math.floor(Math.random() * availableDirections.length)];
        },
        solution: function (maze) {
            var currentRow = 0;
            var currentColumn = 0;
            var currentCell = maze[currentRow][currentColumn];
            var solution = [currentCell];
            while (currentCell !== maze[maze.length - 1][maze.length - 1]) {
                var randomDirection = PathFinder.randomDirection(maze, currentRow, currentColumn, solution);
                if (randomDirection) {
                    currentCell = PathFinder.neighbour(maze, currentRow, currentColumn, randomDirection);
                } else {
                    solution.pop();
                    currentCell = solution.pop();
                    console.log('deadend')
                }
                solution.push(currentCell);
            }

            return solution;
        },
        isSolution: function (maze, cell) {
            return PathFinder.solution(maze).contains(cell);
        }
    };

    var MazeApp = {
        controller: function () {
            var maze = Maze.random();
            return {
                maze: maze,
                isSolution: function (maze, cell) {
                    return true;
                }
            }
        },

        //view
        view: function (ctrl) {
            return m("div.maze", [
                ctrl.maze().map(function (column) {
                    return m(".column", [
                        column.map(function (cell) {
                            var wallClasses = cell.wall.join(' ');
//                            var solutionClass = PathFinder.isSolution(ctrl.maze(), cell) ? 'solution' : '';
                            return m("div", {class: 'wall ' + wallClasses});
                        })
                    ]);
                })
            ]);
        }
    };


    //initialize
    m.mount(document.getElementById("maze"), MazeApp);
</script>